<?php

namespace models;

use components\DB;
use components\DBQuery;
use components\Model;

class User extends Model
{

    public function getData()
    {
        parent::getData(); // TODO: Change the autogenerated stub
    }

    public static function validateRegister($data)
    {
        if (!self::checkEmail($data['email'])) {
            return 'Invalid Email format!';
        }

        if (self::checkEmailExist($data['email'])) {
            return 'Such email already exists!';
        }

        if (!self::checkName($data['name']) || !self::checkName($data['lastName'])) {
            return 'The name and last name must be at least 3 contains letters and whitespace';
        }

        if (!self::checkPassword($data['password'])) {
            return 'Password must contain at least 8 characters';
        }

        return true;
    }

    public static function validateLogin($data) {
        if (!self::checkEmail($data['userLogin'])) {
            return 'Invalid Email format!';
        }

        if (!self::checkPassword($data['userPassword'])) {
            return 'Password has more than 8 characters.';
        }

        $data['userPassword'] = md5($data['userPassword']);

        if (!self::checkUserData($data['userLogin'], $data['userPassword'])) {
            return 'Incorrect email or password.';
        }

        return true;
    }

    public static function registrationUser($email, $name, $lastName, $password, $birthday, $sex)
    {
        $db = DB::connect();
        $query = new DBQuery($db);

        return $query->execute("INSERT INTO `Users`(`email`, `password`, `name`, `lastName`, `sex`, `birthday`) VALUES (:email, :password, :name, :lastName, :sex, :birthday)",
            [
                'email' => $email,
                'password' => $password,
                'name' => $name,
                'lastName' => $lastName,
                'sex' => $sex,
                'birthday' => $birthday,
            ]);
    }

    public static function authorization($user)
    {
        $_SESSION['user'] = $user['id'];
        $_SESSION['userName'] = $user['name'];
    }

    public static function test_input($data)
    {
        $data = trim($data);
        $data = stripslashes($data);
        $data = htmlspecialchars($data);
        return $data;
    }

    public static function checkName($name)
    {
        if ((strlen($name) >= 3) && (preg_match("/^[a-zA-Z ]*$/", $name))) {
            return true;
        }
        return false;
    }

    public static function checkPassword($password)
    {
        if ((strlen($password)) >= 8) {
            return true;
        }
        return false;
    }

    public static function checkEmail($email)
    {
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return true;
        }
        return false;
    }

    //проверка на уникальность логина
    public static function checkEmailExist($email)
    {
        $db = DB::connect();
        $query = new DBQuery($db);

        $result = $query->query('SELECT COUNT(*) FROM Users WHERE email = :email', ['email' => $email]);

        if ($result->fetchColumn()) {
            return true;
        }
        return false;
    }

    //проверка на наличие пользователя в бд
    public static function checkUserData($userName, $password)
    {
        $db = DB::connect();
        $query = new DBQuery($db);

        $result = $query->query('SELECT * FROM Users WHERE email = :email AND password = :password',
            ['email' => $userName, 'password' => $password]);

        $user = $result->fetch();
        if ($user) {
            return $user;
        }
        return false;
    }

    public static function checkLogged()
    {
        if (isset($_SESSION['user'])) {
            return $_SESSION['user'];
        }

        header("Location: /login/");

    }

    public static function isGuest()
    {
        if (isset($_SESSION['user'])) {
            return false;
        }

        return true;
    }
}